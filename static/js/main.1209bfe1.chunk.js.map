{"version":3,"sources":["components/Modal.js","components/Header.js","components/Contents.js","components/Footer.js","App.js","reportWebVitals.js","index.js"],"names":["Modal","props","useState","selectedCountry","setSelectedCountry","className","isModal","aria-label","onClick","onToggleModal","countryOptions","map","item","ISO2","country","Country","onSelectCountry","Header","countryData","setCountryData","setIsModal","useEffect","a","getCountriesApiCall","fetch","then","res","json","data","orderedData","sort","b","role","Contents","monthWords","confirmedData","setConfirmedData","quarantinedData","setQuarantinedData","summarisedData","setSummarisedData","fetchEvent","axios","get","covidData","filterData","items","arr","reduce","acc","cur","currentDate","Date","year","getFullYear","month","getMonth","date","getDate","active","Active","confirmed","Confirmed","deaths","Deaths","recovered","Recovered","foundItem","find","push","labels","datasets","label","backgroundColor","fill","borderColor","lastData","length","options","legend","display","position","Footer","href","App","select","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+NAyCeA,EAtCD,SAACC,GAEb,MAA8CC,mBAASD,EAAME,iBAA7D,mBAAOA,EAAP,KAAwBC,EAAxB,KAQA,OACE,sBAAKC,UAAS,gBAAWJ,EAAMK,QAAU,YAAc,IAAvD,UACE,qBAAKD,UAAU,qBACf,sBAAKA,UAAU,aAAf,UACE,yBAAQA,UAAU,kBAAlB,UACE,mBAAGA,UAAU,mBAAb,4BACA,wBAAQA,UAAU,SAASE,aAAW,QAAQC,QAAS,kBAAMP,EAAMQ,eAAc,SAEnF,yBAASJ,UAAU,kBAAnB,SACE,qBAAKA,UAAU,QAAf,SACGJ,EAAMS,eAAeC,KAAI,SAAAC,GAAI,OAC5B,mBAAGP,UAAS,sBAAiBO,EAAKC,OAASV,EAAgBU,KAAO,YAAc,IAE5EL,QAAS,WAAOJ,EAAmB,CAACS,KAAMD,EAAKC,KAAMC,QAASF,EAAKG,WAFvE,SAGOH,EAAKG,SAFHH,EAAKC,aAOpB,yBAAQR,UAAU,kBAAlB,UACE,wBAAQA,UAAU,oBAAoBG,QA1BxB,WAEpBP,EAAMe,gBAAgBb,GACtBF,EAAMQ,eAAc,IAuBd,oBACA,wBAAQJ,UAAU,SAASG,QAAS,kBAAMP,EAAMQ,eAAc,IAA9D,8BCsBKQ,EApDA,SAAChB,GACd,MAAsCC,mBAAS,IAA/C,mBAAOgB,EAAP,KAAoBC,EAApB,KACA,EAA8BjB,oBAAS,GAAvC,mBAAOI,EAAP,KAAgBc,EAAhB,KAEAC,oBAAS,sBAAE,sBAAAC,EAAA,sDACTC,IADS,2CAER,IAEH,IAAMA,EAAsB,WAC1BC,MAAM,wCACLC,MAAK,SAACC,GACL,OAAOA,EAAIC,UAEZF,MAAK,SAACG,GAEL,IAAMC,EAAcD,EAAKE,MAAK,SAACR,EAAGS,GAAJ,OAAUT,EAAEP,QAAUgB,EAAEhB,QAAU,EAAKgB,EAAEhB,QAAUO,EAAEP,SAAW,EAAI,KAClGI,EAAeU,OAMnB,OACE,yBAAQxB,UAAU,SAAlB,UACE,sBAAKA,UAAU,kBAAkB2B,KAAK,aAAazB,aAAW,kBAA9D,UACE,qBAAKF,UAAU,eAAf,SACE,oBAAIA,UAAU,cAAd,+BAKF,qBAAKA,UAAU,aAAf,SACE,qBAAKA,UAAU,cAAf,SACE,qBAAKA,UAAU,UAAf,SACE,mBAAGA,UAAU,oBAAoBG,QAAS,kBAAMY,GAAW,IAA3D,SACE,+DAOV,cAAC,EAAD,CACEd,QAASA,EACTG,cAAe,SAACH,GAAac,EAAWd,IACxCI,eAAgBQ,EAChBf,gBAAiBF,EAAME,gBACvBa,gBAAiBf,EAAMe,sB,yBCiHhBiB,EA/JE,SAAChC,GAEhB,IAAMiC,EAAa,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAEjG,EAA0ChC,mBAAS,IAAnD,mBAAOiC,EAAP,KAAsBC,EAAtB,KACA,EAA8ClC,mBAAS,IAAvD,mBAAOmC,EAAP,KAAwBC,EAAxB,KACA,EAA4CpC,mBAAS,IAArD,mBAAOqC,EAAP,KAAuBC,EAAvB,KAoFA,OAlFAnB,qBAAU,WACR,IAAMoB,EAAU,uCAAG,4BAAAnB,EAAA,sEACOoB,IAAMC,IAAN,0DAA6D1C,EAAME,gBAAgBU,OAD1F,OACX+B,EADW,OAGjBC,EAAWD,EAAUhB,MAHJ,2CAAH,qDAMViB,EAAa,SAACC,GAClB,IAAMC,EAAMD,EAAME,QAAO,SAACC,EAAKC,GAE7B,IAAMC,EAAc,IAAIC,KAAKF,EAAIE,MAC3BC,EAAOF,EAAYG,cACnBC,EAAQJ,EAAYK,WACpBC,EAAON,EAAYO,UACnBC,EAAST,EAAIU,OACbC,EAAYX,EAAIY,UAChBC,EAASb,EAAIc,OACbC,EAAYf,EAAIgB,UAEhBC,EAAYlB,EAAImB,MAAK,SAACxD,GAAD,OAAUA,EAAKyC,OAASA,GAAQzC,EAAK2C,QAAUA,KAgB1E,OAdKY,GACHlB,EAAIoB,KAAK,CAAChB,OAAME,QAAOE,OAAME,SAAQE,YAAWE,SAAQE,cAGtDE,GAAaA,EAAUV,KAAOA,IAChCU,EAAUV,KAAOA,EACjBU,EAAUR,OAASA,EACnBQ,EAAUN,UAAYA,EACtBM,EAAUJ,OAASA,EACnBI,EAAUF,UAAYA,GAKjBhB,IACN,IAGGqB,EAASvB,EAAIpC,KAAI,SAAAW,GAAC,gBAAOY,EAAWZ,EAAEiC,OAApB,YAA8BjC,EAAE+B,SACxDjB,EAAiB,CACfkC,SACAC,SAAU,CACR,CACEC,MAAO,6BACPC,gBAAiB,SACjBC,MAAM,EACN9C,KAAMmB,EAAIpC,KAAI,SAAAW,GAAC,OAAIA,EAAEuC,iBAK3BvB,EAAmB,CACjBgC,SACAC,SAAU,CACR,CACEC,MAAO,oBACPG,YAAa,SACbD,MAAM,EACN9C,KAAMmB,EAAIpC,KAAI,SAAAW,GAAC,OAAIA,EAAEqC,cAK3B,IAAMiB,EAAW7B,EAAIA,EAAI8B,OAAS,GAClCrC,EAAkB,CAChB8B,OAAQ,CAAC,YAAa,YAAa,UACnCC,SAAU,CACR,CACEC,MAAO,qCACPC,gBAAiB,CAAC,UAAW,UAAW,WACxCE,YAAa,CAAC,UAAW,UAAW,WACpCD,MAAM,EACN9C,KAAM,QAACgD,QAAD,IAACA,OAAD,EAACA,EAAUf,UAAX,OAAsBe,QAAtB,IAAsBA,OAAtB,EAAsBA,EAAUX,UAAhC,OAA2CW,QAA3C,IAA2CA,OAA3C,EAA2CA,EAAUb,aAMnEtB,MACC,CAACxC,EAAME,kBAGR,yBAASE,UAAU,UAAnB,SAEE,sBAAKA,UAAU,mBAAf,UACE,sBAAKA,UAAU,6BAAf,UACE,sBAAKA,UAAU,oBAAf,UACE,mBAAGA,UAAU,QAAb,8CACA,cAAC,IAAD,CAAKuB,KAAMO,EAAe2C,QAQxB,CACEC,OAAQ,CACNC,SAAS,EACTC,SAAU,gBAMlB,sBAAK5E,UAAU,oBAAf,UACE,mBAAGA,UAAU,QAAb,uCACA,cAAC,IAAD,CAAMuB,KAAMS,EAAiByC,QAQ3B,CACEC,OAAQ,CACNC,SAAS,EACTC,SAAU,mBAOpB,qBAAK5E,UAAU,iBAAf,SACE,sBAAKA,UAAU,oBAAf,UACE,oBAAGA,UAAU,QAAb,+DAAwE6B,GAAW,IAAIkB,MAAOI,YAA9F,OACA,cAAC,IAAD,CAAU5B,KAAMW,EAAgBuC,SAIrB,qDAAD,OAAuD5C,GAAW,IAAIkB,MAAOI,YAA7E,KAIR,CACEuB,OAAQ,CACNC,SAAS,EACTC,SAAU,yBCzIbC,EAdA,WACb,OACE,wBAAQ7E,UAAU,SAAlB,SACE,qBAAKA,UAAU,4BAAf,SACE,8BACE,kDADF,OACmC,mBAAG8E,KAAK,yBAAR,wBADnC,gCAEE,mBAAGA,KAAK,iDAAR,iBAFF,KAEoE,uBAFpE,qCAGgB,mBAAGA,KAAK,0BAAR,0BAHhB,YCaOC,MAbf,WAEE,MAA8ClF,mBAAS,CAACY,QAAS,YAAaD,KAAM,OAApF,mBAAOV,EAAP,KAAwBC,EAAxB,KAEA,OACE,sBAAKC,UAAU,MAAf,UACE,cAAC,EAAD,CAAQF,gBAAiBA,EAAiBa,gBAAiB,SAACqE,GAAYjF,EAAmBiF,MAC3F,cAAC,EAAD,CAAUlF,gBAAiBA,IAC3B,cAAC,EAAD,QCFSmF,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqB/D,MAAK,YAAkD,IAA/CgE,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,OCCdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.1209bfe1.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport '../styles/Modal.scss';\r\n\r\nconst Modal = (props) => {\r\n\r\n  const [selectedCountry, setSelectedCountry] = useState(props.selectedCountry);\r\n\r\n  const submitCountry = () => {\r\n    // console.log(selectedCountry);\r\n    props.onSelectCountry(selectedCountry);\r\n    props.onToggleModal(false);\r\n  }\r\n\r\n  return (\r\n    <div className={`modal ${props.isModal ? 'is-active' : ''}`}>\r\n      <div className=\"modal-background\"></div>\r\n      <div className=\"modal-card\">\r\n        <header className=\"modal-card-head\">\r\n          <p className=\"modal-card-title\">Choose Country</p>\r\n          <button className=\"delete\" aria-label=\"close\" onClick={() => props.onToggleModal(false)}></button>\r\n        </header>\r\n        <section className=\"modal-card-body\">\r\n          <div className=\"panel\">\r\n            {props.countryOptions.map(item => (\r\n              <a className={`panel-block ${item.ISO2 === selectedCountry.ISO2 ? 'is-active' : ''}`} \r\n                  key={item.ISO2} \r\n                  onClick={() => {setSelectedCountry({ISO2: item.ISO2, country: item.Country})}}>\r\n                    {item.Country}\r\n              </a>\r\n            ))}\r\n          </div>\r\n        </section>\r\n        <footer className=\"modal-card-foot\">\r\n          <button className=\"button is-success\" onClick={submitCountry}>Select</button>\r\n          <button className=\"button\" onClick={() => props.onToggleModal(false)}>Cancel</button>\r\n        </footer>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Modal\r\n","import React, { useEffect, useState } from 'react';\r\nimport '../styles/Header.scss';\r\nimport Modal from './Modal';\r\n\r\nconst Header = (props) => {\r\n  const [countryData, setCountryData] = useState([]);\r\n  const [isModal, setIsModal] = useState(false);\r\n  \r\n  useEffect( async () => {\r\n    getCountriesApiCall();\r\n  }, []);\r\n\r\n  const getCountriesApiCall = () => {\r\n    fetch(\"https://api.covid19api.com/countries\")\r\n    .then((res) => {\r\n      return res.json();\r\n    })\r\n    .then((data) => {\r\n      // console.log(data);\r\n      const orderedData = data.sort((a, b) => a.Country > b.Country ? 1 : (b.Country > a.Country ? -1 : 0));\r\n      setCountryData(orderedData);\r\n    })\r\n  }; \r\n\r\n  // @TODO: Context를 사용하여 flag 불러오기\r\n\r\n  return (\r\n    <header className=\"header\">\r\n      <nav className=\"navbar is-light\" role=\"navigation\" aria-label=\"main navigation\">\r\n        <div className=\"navbar-brand\">\r\n          <h1 className=\"navbar-item\">\r\n            COVID-19 STATUS\r\n          </h1>\r\n        </div>\r\n\r\n        <div className=\"navbar-end\">\r\n          <div className=\"navbar-item\">\r\n            <div className=\"buttons\">\r\n              <a className=\"button is-primary\" onClick={() => setIsModal(true)}>\r\n                <strong>Choose Country</strong>\r\n              </a>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n\r\n      <Modal \r\n        isModal={isModal} \r\n        onToggleModal={(isModal) => {setIsModal(isModal)}}\r\n        countryOptions={countryData} \r\n        selectedCountry={props.selectedCountry} \r\n        onSelectCountry={props.onSelectCountry} />\r\n    </header>\r\n  )\r\n}\r\n\r\nexport default Header;","import React from 'react'\r\nimport axios from 'axios';\r\nimport { Bar, Doughnut, Line } from \"react-chartjs-2\";\r\nimport { useState, useEffect } from 'react';\r\n\r\nconst Contents = (props) => {\r\n\r\n  const monthWords = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\r\n\r\n  const [confirmedData, setConfirmedData] = useState({});\r\n  const [quarantinedData, setQuarantinedData] = useState({});\r\n  const [summarisedData, setSummarisedData] = useState({});\r\n\r\n  useEffect(() => {\r\n    const fetchEvent = async () => {\r\n      const covidData = await axios.get(`https://api.covid19api.com/total/dayone/country/${props.selectedCountry.ISO2}`);\r\n      // console.log(res);\r\n      filterData(covidData.data);\r\n    }\r\n\r\n    const filterData = (items) => {\r\n      const arr = items.reduce((acc, cur) => {\r\n\r\n        const currentDate = new Date(cur.Date);\r\n        const year = currentDate.getFullYear();\r\n        const month = currentDate.getMonth();\r\n        const date = currentDate.getDate();\r\n        const active = cur.Active;\r\n        const confirmed = cur.Confirmed;\r\n        const deaths = cur.Deaths;\r\n        const recovered = cur.Recovered;\r\n\r\n        const foundItem = acc.find((item) => item.year === year && item.month === month);\r\n\r\n        if (!foundItem) {\r\n          acc.push({year, month, date, active, confirmed, deaths, recovered});\r\n        } \r\n        \r\n        if (foundItem && foundItem.date < date) {\r\n          foundItem.date = date;\r\n          foundItem.active = active;\r\n          foundItem.confirmed = confirmed;\r\n          foundItem.deaths = deaths;\r\n          foundItem.recovered = recovered;\r\n        }\r\n        \r\n        // console.log(cur, curYear, curMonth, curDate);\r\n\r\n        return acc;\r\n      }, []);\r\n      // console.log(arr);\r\n\r\n      const labels = arr.map(a => `${monthWords[a.month]}-${a.year}`);\r\n      setConfirmedData({\r\n        labels,\r\n        datasets: [\r\n          {\r\n            label: \"Cumulative Confirmed Cases\",\r\n            backgroundColor: \"salmon\",\r\n            fill: true,\r\n            data: arr.map(a => a.confirmed)\r\n          }\r\n        ]\r\n      });\r\n\r\n      setQuarantinedData({\r\n        labels,\r\n        datasets: [\r\n          {\r\n            label: \"Quarantined Cases\",\r\n            borderColor: \"salmon\",\r\n            fill: false,\r\n            data: arr.map(a => a.active)\r\n          }\r\n        ]\r\n      });\r\n\r\n      const lastData = arr[arr.length - 1];\r\n      setSummarisedData({\r\n        labels: [\"Confirmed\", \"Recovered\", \"Deaths\"],\r\n        datasets: [\r\n          {\r\n            label: \"Confirmed, Recovered, Deaths ratio\",\r\n            backgroundColor: [\"#ff3d67\", \"#059bff\", \"#ffc233\"],\r\n            borderColor: [\"#ff3d67\", \"#059bff\", \"#ffc233\"],\r\n            fill: false,\r\n            data: [lastData?.confirmed, lastData?.recovered, lastData?.deaths]\r\n          }\r\n        ]\r\n      });\r\n    }\r\n\r\n    fetchEvent();\r\n  }, [props.selectedCountry]);\r\n\r\n  return (\r\n    <section className=\"section\">\r\n      {/* <h1 className=\"title is-2\">COVID-19 Status</h1> */}\r\n      <div className=\"tile is-ancestor\">\r\n        <div className=\"tile is-vertical is-parent\">\r\n          <div className=\"tile is-child box\">\r\n            <p className=\"title\">Cumulative Confirmed Cases Trend</p>\r\n            <Bar data={confirmedData} options={\r\n              {\r\n                title: {\r\n                  display: true,\r\n                  text: \"Cumulative Confirmed Cases Trend\",\r\n                  fontSize: 16\r\n                }\r\n              },\r\n              {\r\n                legend: {\r\n                  display: true,\r\n                  position: \"bottom\"\r\n                }\r\n              }\r\n            } />\r\n          </div>\r\n\r\n          <div className=\"tile is-child box\">\r\n            <p className=\"title\">Monthly Quarantined Cases</p>\r\n            <Line data={quarantinedData} options={\r\n              {\r\n                title: {\r\n                  display: true,\r\n                  text: \"Monthly Quarantined Cases\",\r\n                  fontSize: 16\r\n                }\r\n              },\r\n              {\r\n                legend: {\r\n                  display: true,\r\n                  position: \"bottom\"\r\n                }\r\n              }\r\n            } />\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"tile is-parent\">\r\n          <div className=\"tile is-child box\">\r\n            <p className=\"title\">Cumulative Confirmed, Recovered and Deaths Cases ({monthWords[new Date().getMonth()]})</p>\r\n            <Doughnut data={summarisedData} options={\r\n              {\r\n                title: {\r\n                  display: true,\r\n                  text: `Cumulative Confirmed, Recovered and Deaths Cases (${monthWords[new Date().getMonth()]})`,\r\n                  fontSize: 16\r\n                }\r\n              },\r\n              {\r\n                legend: {\r\n                  display: true,\r\n                  position: \"bottom\"\r\n                }\r\n              }\r\n            } />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </section>\r\n  )\r\n}\r\n\r\nexport default Contents\r\n","import React from 'react'\r\n\r\nconst Footer = () => {\r\n  return (\r\n    <footer className=\"footer\">\r\n      <div className=\"content has-text-centered\">\r\n        <p>\r\n          <strong>Covid Status</strong> by <a href=\"https://iamdaehwa.com/\">Daehwa Seo</a>. The source code is licensed\r\n          <a href=\"http://opensource.org/licenses/mit-license.php\">MIT</a>. <br/>The website content\r\n          is powered by <a href=\"https://covid19api.com/\">Covid 19 API</a>.\r\n        </p>\r\n      </div>\r\n    </footer>\r\n  )\r\n}\r\n\r\nexport default Footer\r\n","import './App.scss';\nimport Header from './components/Header';\nimport Contents from './components/Contents';\nimport { useState } from 'react';\nimport Footer from './components/Footer';\n\nfunction App() {\n\n  const [selectedCountry, setSelectedCountry] = useState({country: \"Australia\", ISO2: \"AU\"});\n\n  return (\n    <div className=\"App\"> \n      <Header selectedCountry={selectedCountry} onSelectCountry={(select) => {setSelectedCountry(select)}} />\n      <Contents selectedCountry={selectedCountry} /> \n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport 'bulma/css/bulma.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}